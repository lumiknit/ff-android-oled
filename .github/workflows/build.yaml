name: Firefox OLED Build

on:
  schedule:
    - cron: "12 3 * * 4" # Tweaked time
  workflow_dispatch:
    inputs:
      version:
        description: "Firefox Android Version (e.g. 138.0)"
        required: true

jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      new_version_available: ${{ steps.version_check.outputs.new_version }}
      tag: ${{ steps.last.outputs.tag }}
      apk_url: ${{ steps.last.outputs.apk_url }}
    steps:
      - name: Check for updates
        id: check_updates
        run: |-
          INPUT_VERSION="${{ github.event.inputs.version }}"

          # Try to get the latest tag
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" \
            | jq -r '.[0].name')
          # Tag should be in the format "X.Y" (e.g. "138.0")
          echo "[INFO] Input Version: $INPUT_VERSION"
          echo "[INFO] Latest Tag: $LATEST_TAG"

          echo "input_version=$INPUT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Guess Target Version
        id: guess_version
        run: |-
          target_version=${steps.check_updates.outputs.input_version}

          # If input version is not provided, from the tag name, guess the next version
          if [ -z "$target_version" ]; then
            latest_tag=${steps.check_updates.outputs.latest_tag}
            # Minor increment
            VERSION_PARTS=(${latest_tag//./ })
            NEXT_MINOR="$(VERSION_PARTS[0]).$((${VERSION_PARTS[1]} + 1))"
            NEXT_MAJOR="$((${VERSION_PARTS[0]} + 1)).0"

            # Check if the next major version is available
            status_code=$(curl -s -o /dev/null -w "%{http_code}" \
              "https://archive.mozilla.org/pub/fenix/releases/$NEXT_MAJOR/android/fenix-${NEXT_MAJOR}-android-arm64-v8a/")
            if [ "$status_code" -lt 400 ]; then
              echo "[INFO] NEXT_MAJOR: $NEXT_MAJOR is available"
              target_version=$NEXT_MAJOR
            else
              # Check if the next minor version is available
              status_code=$(curl -s -o /dev/null -w "%{http_code}" \
                "https://archive.mozilla.org/pub/fenix/releases/$NEXT_MINOR/android/fenix-${NEXT_MINOR}-android-arm64-v8a/")
              if [ "$status_code" -lt 400 ]; then
                echo "Next minor version available: $NEXT_MINOR"
                target_version=$NEXT_MINOR
              else
                echo "No new version available. Quit".
              fi
            fi
          fi

          echo "target_version=$target_version" >> $GITHUB_OUTPUT

      - name: Check existing releases
        id: check_releases
        run: |-
          # Check if that 'target_version' already exists in the releases
          target_version=${steps.guess_version.outputs.target_version}
          echo "[INFO] Target Version: $target_version"
          tag_exists=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" \
            | jq -r --arg tag "${{ steps.get_upstream.outputs.tag }}" \
            'any(.[].name == $tag; .)')
          echo "[INFO] Tag Exists: $tag_exists"
          if [ "$tag_exists" == "true" ]; then
            echo "new_version_available=false" >> $GITHUB_OUTPUT
          else
            echo "new_version_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Get required variables
        id: last
        run: |-
          tgt=${{ steps.guess_version.outputs.target_version }}
          echo "apk_url=https://archive.mozilla.org/pub/fenix/releases/${tgt}/android/fenix-${tgt}.multi.android-arm64-v8a.apk" >> $GITHUB_OUTPUT
          echo "tag=$tgt" >> $GITHUB_OUTPUT

  build:
    needs: check-update
    if: needs.check-update.outputs.new_version_available == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y wget apktool zipalign apksigner jq openjdk-17-jdk

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Download upstream APK
        run: wget -q "${{ needs.check-update.outputs.apk_url }}" -O ff.apk

      - name: Build and patch
        run: bash build.sh

      - name: Sign APK
        run: |
          mv ff-patched-signed.apk ff-${{ needs.check-update.outputs.tag }}-oled.apk
          echo "${{ secrets.KEYSTORE }}" | base64 -di > keystore.jks
          apksigner sign \
            --ks keystore.jks \
            --ks-pass pass:${{ secrets.KEYSTORE_PASSPHRASE }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            ff-${{ needs.check-update.outputs.tag }}-oled.apk

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-update.outputs.tag }}
          files: ff-${{ needs.check-update.outputs.tag }}-oled.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
